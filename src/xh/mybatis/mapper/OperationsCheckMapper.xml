<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xh.mybatis.mapper.OperationsCheckMapper">

	<select id="dataList" parameterType="map"
		resultType="xh.mybatis.bean.OperationsCheckBean">
		select * from xhgmnet_operations_check where 1=1
		<if test="roleType==2">
			and status>1
		</if>

		<if test="time!=null and time!=''">
			and checkMonth=#{time}
		</if>

		order by id desc limit #{start},#{limit}
	</select>
	<insert id="addFile" parameterType="java.util.List">
		insert into
		xhgmnet_operations_check_file(applyId,filePath,fileName)values
		<foreach collection="list" item="x" separator=",">
			(#{x.applyId},#{x.filePath},#{x.fileName})
		</foreach>
	</insert>
	<select id="searchFile" parameterType="String" resultType="map">
		select * from xhgmnet_operations_check_file where applyId=#{applyId}
	</select>
	<delete id="delFile" parameterType="map" >
        delete from xhgmnet_operations_check_file where applyId=#{applyId} and fileName=#{fileName}
    </delete>
	<update id="sealFile" parameterType="int">
		update
		xhgmnet_operations_check_file set isSeal=1 where id=#{id}
	</update>

	<select id="count" parameterType="map" resultType="int">
		select count(*) from xhgmnet_operations_check where 1=1
		<if test="roleType==2">
			and status>1
		</if>
		<if test="time!=null and time!=''">
			and checkMonth=#{time}
		</if>
	</select>

	<!-- 新增考核信息 -->
	<insert id="add" parameterType="xh.mybatis.bean.OperationsCheckBean"
		useGeneratedKeys="true" keyProperty="id">
		insert into
		xhgmnet_operations_check(applyId,userId,user,userName,tel,createTime,fileName,
		filePath,comment,checkMonth,type)values
		(#{applyId},#{userId},#{user},#{userName},#{tel},#{createTime},#{fileName},
		#{filePath},#{comment},#{checkMonth},#{type})
	</insert>
	<update id="update_file_info" parameterType="map">
		update
		xhgmnet_operations_check set
		${fileNamestr}=#{fileName},${filePathstr}=#{filePath},${docNamestr}=#{docName}
		where
		applyId=#{applyId}
	</update>
	<update id="up_score_money" parameterType="xh.mybatis.bean.OperationsCheckBean">
		update
		xhgmnet_operations_check set
		status=#{status},checkUser4=#{checkUser4},checkTime5=#{checkTime5}
		where applyId=#{applyId}
	</update>
	<update id="sure_score_money" parameterType="xh.mybatis.bean.OperationsCheckBean">
		update
		xhgmnet_operations_check set
		status=#{status},checkUser5=#{checkUser5},checkTime6=#{checkTime6}
		where applyId=#{applyId}
	</update>

	<!-- 查询考核明细信息 -->
	<select id="searchDetail" parameterType="map"
		resultType="xh.mybatis.bean.CheckMoneyBean">
		select * from check_month_money where check_date=#{time}
		<if test="period!=null">
			and period=#{period}
		</if>
	</select>
	<select id="show_money_detail" parameterType="map"
		resultType="xh.mybatis.bean.CheckMoneyBean">
		<!-- select x.* FROM(select CASE `level` WHEN 1 THEN "a2" WHEN 2 THEN "a3" 
			WHEN 3 THEN "a4" END as check_tag,period,SUM(timeout)*1000 as money,check_date,SUM(timeout) 
			as timeout from (select a.*,b.`level`,b.period from check_month_timeout as 
			a LEFT JOIN xhgmnet_bs_station as b on a.bsId=b.bsId where check_date=#{time} 
			AND timeout>0) as x where period=4 GROUP BY LEVEL UNION select CASE `level` 
			WHEN 1 THEN "a2" WHEN 2 THEN "a3" WHEN 3 THEN "a4" END as check_tag,period,SUM(timeout)*300 
			as money,check_date,SUM(timeout) as timeout from (select a.*,b.`level`,b.period 
			from check_month_timeout as a LEFT JOIN xhgmnet_bs_station as b on a.bsId=b.bsId 
			where check_date=#{time} AND timeout>0) as x where period=3 GROUP BY LEVEL) 
			as x GROUP BY x.check_tag -->
		select SUM(money) as money,check_tag,period FROM
		check_month_money_detail
		WHERE check_date=#{time} AND period=#{period}
		GROUP BY check_tag


	</select>
	<!-- 查询考核扣分明细 -->
	<select id="search_score_detail" parameterType="map" resultType="map">
		select * from check_month_detail where check_date=#{time} limit
		#{start},#{limit}
	</select>
	<!-- 查询考核扣分明细数量 -->
	<select id="search_score_detail_count" parameterType="map"
		resultType="int">
		select count(*) from check_month_detail where
		check_date=#{time}
	</select>

	<!-- 查询考核扣款明细 -->
	<select id="search_money_detail" parameterType="map" resultType="map">
		select a.*,IF(b.timeout!='',b.timeout,0) as timeout
		from
		check_month_money_detail as a
		LEFT JOIN (select * from
		check_month_timeout where check_date=#{time})
		as b on a.bsId=b.bsId
		where a.check_date=#{time} limit
		#{start},#{limit}
	</select>
	<!-- 查询考核扣款明细数量 -->
	<select id="search_money_detail_count" parameterType="map"
		resultType="int">
		select count(*) from check_month_money_detail where
		check_date=#{time}
	</select>
	<!-- 查询考核得分 -->
	<select id="searchScore" parameterType="map"
		resultType="xh.mybatis.bean.OperationsCheckScoreBean">
		select * from check_month_score where check_month=#{time}
		<if test="period!=null">
			and period=#{period}
		</if>
	</select>

	<select id="show_score_detail" parameterType="map"
		resultType="xh.mybatis.bean.OperationsCheckScoreBean">
		SELECT
		check_type,
		check_child,
		CASE
		WHEN check_tag="a1" AND
		SUM(score)>20 THEN 20
		WHEN check_tag="b1" AND SUM(score)>3 THEN 3
		WHEN
		check_tag="b2" AND SUM(score)>1 THEN 1
		WHEN check_tag="b3" AND
		SUM(score)>9 THEN 9
		WHEN check_tag="b4" AND SUM(score)>2 THEN 2
		WHEN
		check_tag="c1" AND SUM(score)>10 THEN 10
		WHEN check_tag="c2" AND
		SUM(score)>10 THEN 10
		WHEN check_tag="d1" AND SUM(score)>25 THEN 25
		WHEN check_tag="d2" AND SUM(score)>5 THEN 5
		WHEN check_tag="e1" AND
		SUM(score)>5 THEN 5
		WHEN check_tag="f1" AND SUM(score)>3 THEN 3
		WHEN
		check_tag="f2" AND SUM(score)>2 THEN 2
		WHEN check_tag="g1" AND
		SUM(score)>5 THEN 5
		ELSE SUM(score)
		END AS score,
		check_tag,
		check_date AS
		check_month
		FROM
		check_month_detail
		WHERE
		check_date = #{time}
		AND(period=#{period} OR period IS NULL OR period='')
		GROUP BY
		check_tag;
	</select>
	<!-- 判断考核明细信息是否存在 -->
	<select id="detailExists" parameterType="String" resultType="int">
		select count(id) from xhgmnet_operations_check_detail where
		time=#{time}
	</select>
	<!-- 新增考核扣分 -->
	<insert id="addScore" parameterType="java.util.List">
		replace into
		check_month_score(check_type,check_tag,score,check_note,check_month,period)values
		<foreach collection="list" item="it" separator=",">
			(#{it.check_type},#{it.check_tag},#{it.score},#{it.check_note},#{it.check_month},#{it.period})
		</foreach>

	</insert>

	<!-- 新增考核明细 -->
	<insert id="addDetail" parameterType="java.util.List">
		replace into
		check_month_money(check_tag,money,check_note,check_date,period)values
		<foreach collection="list" item="it" separator=",">
			(#{it.check_tag},#{it.money},#{it.check_note},#{it.check_date},#{it.period})
		</foreach>
	</insert>
	<!-- 修改考核明细 -->
	<update id="updateDetail" parameterType="xh.mybatis.bean.OperationsCheckDetailBean">
		update
		xhgmnet_operations_check_detail set
		applyId=#{applyId},time=#{time},service_msc=#{service_msc},
		service_msc_note=#{service_msc_note},service_singlebs1=#{service_singlebs1},
		service_singlebs1_note=#{service_singlebs1_note},service_singlebs2=#{service_singlebs2},
		service_singlebs2_note=#{service_singlebs2_note},
		service_singlebs3=#{service_singlebs3},
		service_singlebs3_note=#{service_singlebs3_note},
		fault_ctl1=#{fault_ctl1},
		fault_ctl1_note=#{fault_ctl1_note},
		fault_ctl2=#{fault_ctl2},
		fault_ctl2_note=#{fault_ctl2_note},
		fault_port_time1=#{fault_port_time1},
		fault_port_time1_note=#{fault_port_time1_note},
		fault_port_time2=#{fault_port_time2},
		fault_port_time2_note=#{fault_port_time2_note},
		fault_port_time3=#{fault_port_time3},
		fault_port_time3_note=#{fault_port_time3_note},
		user_service=#{user_service},
		user_service_note=#{user_service_note},
		user_train=#{user_train},
		user_train_note=#{user_train_note},
		emergency1=#{emergency1},
		emergency1_note=#{emergency1_note},
		emergency2=#{emergency2},
		emergency2_note=#{emergency2_note},
		emergency3=#{emergency3},
		emergency3_note=#{emergency3_note},
		information=#{information},
		information_note=#{information_note},
		security=#{security},
		security_note=#{security_note},
		other=#{other},
		other_note=#{other_note} where time=#{time}
	</update>
	<update id="check2" parameterType="xh.mybatis.bean.OperationsCheckBean">
		update
		xhgmnet_operations_check set
		checkTime=#{checkTime},checkUser=#{checkUser},status=#{status},note1=#{note1}
		where id=#{id}
	</update>
	<update id="check3" parameterType="xh.mybatis.bean.OperationsCheckBean">
		update
		xhgmnet_operations_check set
		checkTime2=#{checkTime2},status=#{status}
		where id=#{id}
	</update>
	<update id="signMeet" parameterType="xh.mybatis.bean.OperationsCheckBean">
		update
		xhgmnet_operations_check set
		isMeetDocSign=#{isMeetDocSign}
		<if test="status==9">
			,writeMeetUser=#{writeMeetUser},writeMeetRoleType=#{writeMeetRoleType}
		</if>
		where id=#{id}
	</update>
	<update id="sealScoreMoneyComplete" parameterType="xh.mybatis.bean.OperationsCheckBean">
		update
		xhgmnet_operations_check set status=#{status}
		<if test="type==2">,checkTime8=#{checkTime8}</if>
		<if test="type==0 || type==3">,checkTime7=#{checkTime7}</if>
		where id=#{id}
	</update>
	<update id="check4" parameterType="xh.mybatis.bean.OperationsCheckBean">
		update
		xhgmnet_operations_check set
		checkTime3=#{checkTime3},status=#{status},comment=#{comment},checkUser2=#{checkUser2}
		where id=#{id}
	</update>
	<!-- 确认文件 -->
	<update id="check5" parameterType="xh.mybatis.bean.OperationsCheckBean">
		update
		xhgmnet_operations_check set
		checkTime4=#{checkTime4},status=#{status},checkUser3=#{checkUser3}
		where id=#{id}
	</update>
	<!-- 考核机房配套设施 OR c.generatorConfig = 0 -->
	<select id="check_room_equ" resultType="map">
		SELECT
		a.bsId,
		a.envMonitor,
		b.air_conditioning,
		b.fire,
		b.lightning,
		c.generatorConfig,
		c.has_spare_power,
		d.period
		FROM
		xhgmnet_bs_station AS a
		LEFT JOIN
		xhgmnet_bs_machine_room AS b ON a.bsId = b.bsId
		LEFT JOIN
		xhgmnet_bs_supply_electricity AS c ON a.bsId = c.bsId
		LEFT JOIN
		xhgmnet_bs_station as d on a.bsId=d.bsId
		WHERE
		a.type != 2
		AND a.`status`
		= 1
		AND (
		a.envMonitor = 2
		OR b.air_conditioning = "未配置"
		OR b.fire = "未配置"
		OR b.lightning = "未安装"

		OR
		c.has_spare_power !=
		"是"
		)
		ORDER BY
		a.bsId ASC
	</select>
	<insert id="insert_check_month_detail" useGeneratedKeys="true"
		parameterType="xh.mybatis.bean.CheckRoomEquBean">
		insert into
		check_month_detail(check_type,check_child,check_tag,bsId,score,period,detail,check_date,fault_time)
		values(#{check_type},#{check_child},#{check_tag},#{bsId},#{score},#{period},#{detail},#{check_date},#{fault_time})
	</insert>
	<!-- 考核运维人员是否达到20人 -->
	<select id="check_phone_book" resultType="int">
		select count(*) from
		xhgmnet_phonebook
	</select>
	<!-- 考核运办公场所 ,考核仪器仪表 ,考核运维车辆不足3辆 -->
	<select id="check_officeaddress" resultType="map">
		select
		(select
		count(*) from xhgmnet_operation_officeaddress) as address,
		(select
		count(*) from xhgmnet_operations_instrument) as instrument,
		(select
		count(*) from xhgmnet_operations_bus) as bus
	</select>
	<!-- 考核备品备件完好率低于80% -->
	<select id="check_attachment" resultType="map">
		select x.* from (
		SELECT
		a.attachment_name,
		a.attachment_model,
		count(a.attachment_model)
		AS num,
		b.attachment_conf_number,
		CONVERT (
		count(a.attachment_model) /
		b.attachment_conf_number * 100,
		DECIMAL (10, 2)
		) AS perc
		FROM
		xhgmnet_operations_attachment AS a
		LEFT JOIN
		xhgmnet_operations_attachment_config AS b ON a.attachment_model
		=
		b.attachment_model
		GROUP BY
		a.attachment_model
		) as x where x.perc &lt;80
	</select>
	<insert id="insert_check_month_money_detail" useGeneratedKeys="true"
		parameterType="xh.mybatis.bean.CheckMoneyBean">
		insert into
		check_month_money_detail(check_type,check_child,check_tag,bsId,money,period,check_date,fault_time,
		check_time,level,check_datetime,timeout_standard)
		values(#{check_type},#{check_child},#{check_tag},#{bsId},#{money},#{period},#{check_date},
		#{fault_time},#{check_time},#{level},#{check_datetime},#{timeout_standard})
	</insert>
	<!--清楚基站扣分记录 -->
	<delete id="del_score" parameterType="String">
		delete from
		check_month_detail where check_date=#{time}
	</delete>
	<!--清楚基站扣款记录 -->
	<delete id="del_money" parameterType="String">
		delete from
		check_month_money_detail where check_date=#{time}
	</delete>
	<!--基站 故障 -->
	<select id="bs_error" resultType="map" parameterType="String">
		select
		a.bsId,sum(a.faultTimeTotal) as faultTimeTotal,b.`level`,b.period,
		CASE WHEN sum(c.checkCutTime) is NULL THEN 0
		ELSE sum(c.checkCutTime)
		END as checkCutTime
		FROM xhgmnet_operations_bsfault_three as a
		LEFT JOIN
		xhgmnet_bs_station as b on a.bsId=b.bsId
		LEFT JOIN xhgmnet_bs_checkcut
		as c on a.fault_id=c.id
		WHERE DATE_FORMAT(a.time,"%Y-%m")=#{time} AND
		a.faultTimeTotal is NOT
		NULL GROUP BY a.bsId
	</select>
	<!-- (特别)重大故障 -->
	<select id="tb_zd_fault" parameterType="map" resultType="map">
		select TIMESTAMPDIFF(MINUTE,produce_time,recovery_time) as usetime,
		(TIMESTAMPDIFF(MINUTE,produce_time,recovery_time)-60) timeout,
		fault_type,type,period from xhgmnet_operations_fault_one
		WHERE
		DATE_FORMAT(produce_time,"%Y-%m")=#{time}
		<if test="period!=0">
			and period=#{period}
		</if>
	</select>


	<select id="bs_error_money" resultType="map" parameterType="String">

		SELECT
		(
		CASE
		WHEN a.bsId > 1200
		AND a.bsId &lt;2000 THEN
		a.bsId % 1000
		ELSE
		a.bsId
		END
		) AS bsId,
		a.time,
		a.faultRecoveryTime,
		a.faultTimeTotal,
		a.severity,
		b.level,
		sum(
		TIMESTAMPDIFF(
		MINUTE,
		a.time,
		a.faultRecoveryTime
		)
		) AS timeout,
		b.period,
		b.name,
		sum(c.checkCutTime)
		AS checkTime
		FROM
		xhgmnet_operations_bsfault AS a
		LEFT JOIN
		xhgmnet_bs_station AS b ON a.bsId = b.bsId
		LEFT JOIN
		xhgmnet_bs_checkcut AS c ON a.id = c.id
		WHERE
		a.neType = 4
		AND a.modType
		= 3
		AND (a.bsId &lt;1000 OR a.bsId > 1200)
		AND CASE
		WHEN a.bsId > 1200
		AND a.bsId &lt; 2000 THEN
		(a.bsId % 1000) NOT IN (
		SELECT
		bsIds
		FROM
		xhgmnet_stationalarm
		)
		ELSE
		a.bsId NOT IN (
		SELECT
		bsIds
		FROM
		xhgmnet_stationalarm
		)
		END
		AND a.faultRecoveryTime IS NOT NULL
		AND
		DATE_FORMAT(faultRecoveryTime, "%Y-%m") = #{time}
		GROUP BY
		bsId
	</select>

	<select id="error_money_total" resultType="map" parameterType="String">
		select
		CASE `level`
		WHEN 1 THEN "一级基站"
		WHEN 2 THEN "二级基站"
		WHEN
		3 THEN
		"三级基站" END as level,period,SUM(timeout) as timeout,SUM(timeout)*1000
		as money,check_date
		from (select a.*,b.`level`,b.period from
		check_month_timeout as a
		LEFT JOIN xhgmnet_bs_station as b on
		a.bsId=b.bsId
		where check_date=#{time} AND timeout>0) as x where
		period=4 GROUP BY
		LEVEL

		UNION

		select
		CASE `level`
		WHEN 1 THEN "一级基站"
		WHEN 2
		THEN "二级基站"
		WHEN
		3 THEN "三级基站" END as level,period,SUM(timeout) as
		timeout,SUM(timeout)*300 as money,check_date
		from (select
		a.*,b.`level`,b.period from check_month_timeout as a
		LEFT JOIN
		xhgmnet_bs_station as b on a.bsId=b.bsId
		where check_date=#{time} AND
		timeout>0) as x where period=3 GROUP BY
		LEVEL


	</select>
	<select id="error_money_total2" resultType="map" parameterType="String">
		select check_tag,
		CASE `level`
		WHEN 1 THEN "一级基站"
		WHEN 2 THEN "二级基站"
		WHEN
		3 THEN "三级基站" END as level,
		period,SUM(fault_time) as
		fault_time,SUM(check_time) as check_time,
		ROUND((SUM(fault_time)-SUM(check_time))/60) as time,
		CASE WHEN
		`level`=1 THEN
		((ROUND((SUM(fault_time)-SUM(check_time))/60))-1)*1000
		WHEN `level`=2 THEN
		((ROUND((SUM(fault_time)-SUM(check_time))/60))-5)*1000
		WHEN `level`=3
		THEN
		((ROUND((SUM(fault_time)-SUM(check_time))/60))-9)*1000
		END as
		money,
		check_date from check_month_money_detail where fault_time>0 and
		period=4 and check_date=#{time} GROUP
		BY `level`

		UNION

		select
		check_tag,
		CASE `level`
		WHEN 1 THEN "一级基站"
		WHEN 2 THEN "二级基站"
		WHEN 3 THEN "三级基站" END
		as level,
		period,SUM(fault_time) as
		fault_time,SUM(check_time)
		as
		check_time,
		ROUND((SUM(fault_time)-SUM(check_time))/60) as time,
		CASE
		WHEN
		`level`=1 THEN
		((ROUND((SUM(fault_time)-SUM(check_time))/60))-1)*300
		WHEN `level`=2
		THEN
		((ROUND((SUM(fault_time)-SUM(check_time))/60))-5)*300
		WHEN
		`level`=3
		THEN
		((ROUND((SUM(fault_time)-SUM(check_time))/60))-9)*300
		END
		as money,
		check_date from check_month_money_detail where
		fault_time>0
		and
		period=3 and check_date=#{time} GROUP
		BY `level`

		UNION

		select
		check_tag,
		check_child as level,0
		as period,fault_time,check_time,0
		as
		time,SUM(money) as money,check_date
		from check_month_money_detail
		where
		check_type="故障控制" and check_date=#{time} GROUP BY
		check_child



	</select>

	<!-- 考核一级基站 -->
	<select id="check_onelevel_bs" resultType="map">
		select
		a.bsId,a.time,a.faultRecoveryTime,a.severity,TIMESTAMPDIFF(HOUR,a.time,a.faultRecoveryTime)
		as timeout,b.period from xhgmnet_operations_bsfault as a
		left join
		xhgmnet_bs_station as b on CASE
		WHEN a.bsId > 1200 and a.bsId &lt; 2000
		THEN
		a.bsId % 1000 = b.bsId
		ELSE
		a.bsId = b.bsId
		END
		where a.neType=4 and
		a.modType=3
		and (a.bsId&lt;1000 or a.bsId>1200) and
		(a.bsId%1000) in
		(select
		bsId
		from
		xhgmnet_bs_station where `level`=1)
		and
		(a.bsId%1000)
		NOT
		in
		(select
		bsIds from xhgmnet_stationalarm) and
		a.faultRecoveryTime
		is not
		NULL
		and
		TIMESTAMPDIFF(HOUR,a.time,a.faultRecoveryTime)>1
	</select>
	<!-- 考核二级级基站 -->
	<select id="check_twolevel_bs" resultType="map">
		select
		a.bsId,a.time,a.faultRecoveryTime,a.severity,TIMESTAMPDIFF(HOUR,a.time,a.faultRecoveryTime)
		as timeout,b.period from xhgmnet_operations_bsfault as a
		left join
		xhgmnet_bs_station as b on CASE
		WHEN a.bsId > 1200 and a.bsId &lt; 2000
		THEN
		a.bsId % 1000 = b.bsId
		ELSE
		a.bsId = b.bsId
		END
		where a.neType=4 and
		a.modType=3
		and (a.bsId&lt;1000 or a.bsId>1200) and
		(a.bsId%1000) in
		(select
		bsId
		from
		xhgmnet_bs_station where `level`=2)
		and
		(a.bsId%1000)
		NOT
		in
		(select
		bsIds from xhgmnet_stationalarm) and
		a.faultRecoveryTime
		is not
		NULL
		and
		TIMESTAMPDIFF(HOUR,a.time,a.faultRecoveryTime)>1
	</select>
	<!-- 考核三级基站 -->
	<select id="check_threelevel_bs" resultType="map">
		select
		a.bsId,a.time,a.faultRecoveryTime,a.severity,TIMESTAMPDIFF(HOUR,a.time,a.faultRecoveryTime)
		as timeout,b.period from xhgmnet_operations_bsfault as a
		left join
		xhgmnet_bs_station as b on CASE
		WHEN a.bsId > 1200 and a.bsId &lt; 2000
		THEN
		a.bsId % 1000 = b.bsId
		ELSE
		a.bsId = b.bsId
		END
		where a.neType=4 and
		a.modType=3
		and (a.bsId&lt;1000 or a.bsId>1200) and
		(a.bsId%1000) in
		(select
		bsId
		from
		xhgmnet_bs_station where `level`=3)
		and
		(a.bsId%1000)
		NOT
		in
		(select
		bsIds from xhgmnet_stationalarm) and
		a.faultRecoveryTime
		is not
		NULL
		and
		TIMESTAMPDIFF(HOUR,a.time,a.faultRecoveryTime)>1
	</select>
	<!-- 考核特别重大故障 -->
	<select id="check_onelevel_fault" resultType="map">

		SELECT
		count(a.bsId) as num,
		b.period
		FROM
		xhgmnet_operations_bsfault AS a
		LEFT
		JOIN
		xhgmnet_bs_station AS b ON CASE
		WHEN a.bsId > 1200 and a.bsId &lt;
		2000 THEN
		a.bsId % 1000 = b.bsId
		ELSE
		a.bsId = b.bsId
		END
		WHERE
		a.severity
		="特别重大故障"
		group by b.period
	</select>
	<!-- 考核重大故障 -->
	<select id="check_twolevel_fault" resultType="map">
		SELECT
		count(a.bsId) as num,
		b.period
		FROM
		xhgmnet_operations_bsfault AS a
		LEFT
		JOIN
		xhgmnet_bs_station AS b ON CASE
		WHEN a.bsId > 1200 and a.bsId &lt;
		2000 THEN
		a.bsId % 1000 = b.bsId
		ELSE
		a.bsId = b.bsId
		END
		WHERE
		a.severity
		="重大故障"
		group by b.period
	</select>
	<select id="search_checkcut_count" parameterType="map"
		resultType="int">
		select count(*) from xhgmnet_bs_checkcut WHERE checked=2
		AND DATE_FORMAT(breakTime,"%Y-%m")=#{month} AND breakTime &lt;NOW()
		AND bsId in ( select bsId FROM xhgmnet_bs_station WHERE
		period=#{period})

	</select>
	<!-- 写入每月基站断站时长 -->
	<insert id="insert_check_month_bs_break" useGeneratedKeys="false"
		parameterType="xh.mybatis.bean.CheckMonthBsBreakBean">
		replace into
		check_month_bs_break(bsId,level,period,break_time,checkcut_time,check_date)
		values(#{bsId},#{level},#{period},#{break_time},#{checkcut_time},#{check_date})
	</insert>

	<select id="search_year_bs_break" parameterType="map"
		resultType="map">
		select bsId,`level`,period,SUM(break_time) as
		break_time,SUM(checkcut_time)
		as checkcut_time FROM
		check_month_bs_break
		WHERE DATE_FORMAT(check_date,"%Y-%m") BETWEEN
		#{start_time} AND #{end_time}
		and period=#{period} GROUP BY bsId
	</select>
	<select id="search_month_bs_break" parameterType="map"
		resultType="map">
		<!-- select * FROM check_month_bs_break WHERE DATE_FORMAT(check_date,"%Y-%m")= 
			#{time} and period=#{period} -->

		select a.*,
		(SELECT SUM(break_time) FROM check_month_bs_break
		WHERE DATE_FORMAT(check_date,"%Y-%m") BETWEEN #{start_time} AND #{end_time}
		and period=#{period} AND bsId=a.bsId) as break_time_total,
		(SELECT SUM(checkcut_time) FROM check_month_bs_break
		WHERE DATE_FORMAT(check_date,"%Y-%m") BETWEEN #{start_time} AND #{end_time}
		and period=#{period} AND bsId=a.bsId) as checkcut_time_total

		FROM check_month_bs_break as a
		WHERE
		DATE_FORMAT(check_date,"%Y-%m") =#{time} AND period=#{period}


	</select>


</mapper>